# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Institute {
  id: ID!
  name: String!
  country: String
}

type Worker {
  id: ID!
  name: String!
  email: String
  country: String!
  phone_number: String!
  currency: String!
  tasks: [TaskAssignment!]
}

type TaskAssignment {
  budget_allocated: Int!
  payment_made: Int!
}

type Task {
  id: ID!
  name: String!
  description: String
  payment_decided: Int!
  payment_received: Int!
  total_marks: Int
  obtained_marks: Int
  deadline: DateTime
  submitted: DateTime
  status: TaskStatus!
  type: TaskType!
  institute: Institute
  assignments: [TaskAssignment!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The status of the task"""
enum TaskStatus {
  Unassigned
  InProgress
  Delivered
  Cancelled
  InRevision
  OnHold
}

"""The type of the task"""
enum TaskType {
  Assignment
  Quiz
  Exam
}

type Client {
  id: ID!
  name: String!
  email: String
  country: String!
  phone_number: String!
  currency: String!
}

type Query {
  getClients: [Client!]!
  getClientById(id: Float!): Client
  getClientByName(name: String!): Client
  getWorkers: [Worker!]!
  getWorkerById(id: Float!): Worker
  getWorkerByName(name: String!): Worker
  getTasks: [Task!]!
  getTaskById(id: Float!): Task
  getTaskByName(name: String!): Task
  getInstitutes: [Institute!]!
  getInstituteById(id: Float!): Institute
  getInstituteByName(name: String!): Institute
  getTaskAssignments: [TaskAssignment!]!
  getTaskAssignmentById(taskId: Float!, workerId: Float!): TaskAssignment
}

type Mutation {
  addClient(createClientData: CreatePersonInput!): Client!
  updateClient(id: Float!, updateData: CreatePersonInput!): Client!
  deleteClient(id: Float!): Boolean!
  addWorker(createWorkerData: CreatePersonInput!): Worker!
  updateWorker(id: Float!, updateData: CreatePersonInput!): Worker!
  deleteWorker(id: Float!): Boolean!
  addTask(createTaskData: CreateTaskInput!): Task!
  updateTask(id: Float!, updateData: CreateTaskInput!): Task!
  deleteTask(id: Float!): Boolean!
  addInstitute(createInstituteData: CreateInstituteInput!): Institute!
  updateInstitute(id: Float!, updateData: CreateInstituteInput!): Institute!
  deleteInstitute(id: Float!): Boolean!
  addTaskAssignment(createTaskAssignmentData: CreateTaskAssignmentInput!): TaskAssignment!
  updateTaskAssignment(taskId: Float!, workerId: Float!, updateData: CreateTaskAssignmentInput!): TaskAssignment!
  deleteTaskAssignment(taskId: Float!, workerId: Float!): Boolean!
}

input CreatePersonInput {
  name: String!
  email: String
  country: String!
  phone_number: String!
}

input CreateTaskInput {
  name: String!
  description: String
  budget_allocated: Int
  payment_received: Int
  deadline: DateTime!
  institute_id: Int
  client_id: Int
  status: String
  type: String
}

input CreateInstituteInput {
  name: String!
  country: String
}

input CreateTaskAssignmentInput {
  task_id: Int!
  worker_id: Int!
  budget_allocated: Int
  payment_made: Int
}